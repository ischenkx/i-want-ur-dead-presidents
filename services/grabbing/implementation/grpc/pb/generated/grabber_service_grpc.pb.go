// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package grabbing

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GrabbingClient is the client API for Grabbing service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GrabbingClient interface {
	Get(ctx context.Context, in *Product, opts ...grpc.CallOption) (*Response, error)
}

type grabbingClient struct {
	cc grpc.ClientConnInterface
}

func NewGrabbingClient(cc grpc.ClientConnInterface) GrabbingClient {
	return &grabbingClient{cc}
}

func (c *grabbingClient) Get(ctx context.Context, in *Product, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/Grabbing/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GrabbingServer is the service API for Grabbing service.
// All implementations must embed UnimplementedGrabbingServer
// for forward compatibility
type GrabbingServer interface {
	Get(context.Context, *Product) (*Response, error)
	mustEmbedUnimplementedGrabbingServer()
}

// UnimplementedGrabbingServer must be embedded to have forward compatible implementations.
type UnimplementedGrabbingServer struct {
}

func (UnimplementedGrabbingServer) Get(context.Context, *Product) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedGrabbingServer) mustEmbedUnimplementedGrabbingServer() {}

// UnsafeGrabbingServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GrabbingServer will
// result in compilation errors.
type UnsafeGrabbingServer interface {
	mustEmbedUnimplementedGrabbingServer()
}

func RegisterGrabbingServer(s grpc.ServiceRegistrar, srv GrabbingServer) {
	s.RegisterService(&Grabbing_ServiceDesc, srv)
}

func _Grabbing_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Product)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrabbingServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Grabbing/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrabbingServer).Get(ctx, req.(*Product))
	}
	return interceptor(ctx, in, info, handler)
}

// Grabbing_ServiceDesc is the grpc.ServiceDesc for Grabbing service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Grabbing_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Grabbing",
	HandlerType: (*GrabbingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _Grabbing_Get_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grabber_service.proto",
}
