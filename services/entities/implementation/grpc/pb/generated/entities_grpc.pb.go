// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package entitiesGrpcGen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EntitiesClient is the client API for Entities service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EntitiesClient interface {
	Create(ctx context.Context, in *CreateEntityRequest, opts ...grpc.CallOption) (*Entity, error)
	Delete(ctx context.Context, in *DeleteEntityRequest, opts ...grpc.CallOption) (*Entity, error)
	Update(ctx context.Context, in *UpdateEntityRequest, opts ...grpc.CallOption) (*Entity, error)
	Get(ctx context.Context, in *GetEntityRequest, opts ...grpc.CallOption) (*EntityArray, error)
	GetByOwnerID(ctx context.Context, in *GetEntityByOwnerIDRequest, opts ...grpc.CallOption) (*EntityArray, error)
}

type entitiesClient struct {
	cc grpc.ClientConnInterface
}

func NewEntitiesClient(cc grpc.ClientConnInterface) EntitiesClient {
	return &entitiesClient{cc}
}

func (c *entitiesClient) Create(ctx context.Context, in *CreateEntityRequest, opts ...grpc.CallOption) (*Entity, error) {
	out := new(Entity)
	err := c.cc.Invoke(ctx, "/Entities/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entitiesClient) Delete(ctx context.Context, in *DeleteEntityRequest, opts ...grpc.CallOption) (*Entity, error) {
	out := new(Entity)
	err := c.cc.Invoke(ctx, "/Entities/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entitiesClient) Update(ctx context.Context, in *UpdateEntityRequest, opts ...grpc.CallOption) (*Entity, error) {
	out := new(Entity)
	err := c.cc.Invoke(ctx, "/Entities/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entitiesClient) Get(ctx context.Context, in *GetEntityRequest, opts ...grpc.CallOption) (*EntityArray, error) {
	out := new(EntityArray)
	err := c.cc.Invoke(ctx, "/Entities/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entitiesClient) GetByOwnerID(ctx context.Context, in *GetEntityByOwnerIDRequest, opts ...grpc.CallOption) (*EntityArray, error) {
	out := new(EntityArray)
	err := c.cc.Invoke(ctx, "/Entities/GetByOwnerID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EntitiesServer is the server API for Entities service.
// All implementations must embed UnimplementedEntitiesServer
// for forward compatibility
type EntitiesServer interface {
	Create(context.Context, *CreateEntityRequest) (*Entity, error)
	Delete(context.Context, *DeleteEntityRequest) (*Entity, error)
	Update(context.Context, *UpdateEntityRequest) (*Entity, error)
	Get(context.Context, *GetEntityRequest) (*EntityArray, error)
	GetByOwnerID(context.Context, *GetEntityByOwnerIDRequest) (*EntityArray, error)
	mustEmbedUnimplementedEntitiesServer()
}

// UnimplementedEntitiesServer must be embedded to have forward compatible implementations.
type UnimplementedEntitiesServer struct {
}

func (UnimplementedEntitiesServer) Create(context.Context, *CreateEntityRequest) (*Entity, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedEntitiesServer) Delete(context.Context, *DeleteEntityRequest) (*Entity, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedEntitiesServer) Update(context.Context, *UpdateEntityRequest) (*Entity, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedEntitiesServer) Get(context.Context, *GetEntityRequest) (*EntityArray, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedEntitiesServer) GetByOwnerID(context.Context, *GetEntityByOwnerIDRequest) (*EntityArray, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByOwnerID not implemented")
}
func (UnimplementedEntitiesServer) mustEmbedUnimplementedEntitiesServer() {}

// UnsafeEntitiesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EntitiesServer will
// result in compilation errors.
type UnsafeEntitiesServer interface {
	mustEmbedUnimplementedEntitiesServer()
}

func RegisterEntitiesServer(s grpc.ServiceRegistrar, srv EntitiesServer) {
	s.RegisterService(&Entities_ServiceDesc, srv)
}

func _Entities_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntitiesServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Entities/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntitiesServer).Create(ctx, req.(*CreateEntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Entities_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteEntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntitiesServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Entities/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntitiesServer).Delete(ctx, req.(*DeleteEntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Entities_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntitiesServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Entities/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntitiesServer).Update(ctx, req.(*UpdateEntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Entities_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntitiesServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Entities/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntitiesServer).Get(ctx, req.(*GetEntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Entities_GetByOwnerID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEntityByOwnerIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntitiesServer).GetByOwnerID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Entities/GetByOwnerID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntitiesServer).GetByOwnerID(ctx, req.(*GetEntityByOwnerIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Entities_ServiceDesc is the grpc.ServiceDesc for Entities service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Entities_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Entities",
	HandlerType: (*EntitiesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Entities_Create_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Entities_Delete_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Entities_Update_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _Entities_Get_Handler,
		},
		{
			MethodName: "GetByOwnerID",
			Handler:    _Entities_GetByOwnerID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "entities.proto",
}
